require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/order_items", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # OrderItem. As you add validations to OrderItem, be sure to
  # adjust the attributes here as well.
  let(:user) do
    User.create!(
      {
        first_name: "Bobby",
        street_address: "190 Liberty Street",
        postal_code: "M6K3L5",
      }
    )
  end

  let(:store) do
    Store.create!(
      {
        name: "Liberty Village Store #1",
        street_address: "190 Liberty Street",
        city: "Toronto",
        postal_code: "M6K3L5",
        state: "Ontario",
        country: "Canada",
        phone_number: "555-123-4567",
        postal_codes: []
      }
    )
  end

  let(:timeslot) do
    TimeSlot.create!(
      {
        from_time: "09:00:00",
        to_time: "10:00:00",
        store_id: store.id,
      }
    )
  end

  let(:product) do
    Product.create!(
      {
        name: "Fairlife Milk 2%",
        unit_price: 5.75,
        store_id: 1
      }
    )
  end

  let(:order) do
    Order.create!(
      {
        user_id: user.id,
        sub_total: 10.00,
        fulfillment_date: '2021-12-08',
        fees_total: 2.00,
        tax_total: 1.13,
        final_total: 13.13,
        gift_comment: "Merry Christmas!",
        store_id: store.id,
        timeslot_id: timeslot.id,
        bulk_order_num: '1'
      }
    )
  end

  let(:valid_attributes) {
    {
      order_id: order.id,
      name: "Fairlife Milk 2%",
      product_id: product.id,
      unit_price: 5.75,
      quantity: 2,
      uom: 'each'
    }
  }

  let(:invalid_attributes) {
    {
      order_id: order.id,
      name: "Fairlife Milk 2%",
      product_id: product.id,
      unit_price: 5.75,
      quantity: nil,
      uom: 'each'
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # OrderItemsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      OrderItem.create! valid_attributes
      get order_items_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      order_item = OrderItem.create! valid_attributes
      get order_item_url(order_item), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new OrderItem" do
        expect {
          post order_items_url,
               params: { order_item: valid_attributes }, headers: valid_headers, as: :json
        }.to change(OrderItem, :count).by(1)
      end

      it "renders a JSON response with the new order_item" do
        post order_items_url,
             params: { order_item: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new OrderItem" do
        expect {
          post order_items_url,
               params: { order_item: invalid_attributes }, as: :json
        }.to change(OrderItem, :count).by(0)
      end

      it "renders a JSON response with errors for the new order_item" do
        post order_items_url,
             params: { order_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          quantity: 3,
        }
      }

      it "updates the requested order_item" do
        order_item = OrderItem.create! valid_attributes
        patch order_item_url(order_item),
              params: { order_item: new_attributes }, headers: valid_headers, as: :json
        order_item.reload
        expect(order_item.quantity).to eq(new_attributes[:quantity])
      end

      it "renders a JSON response with the order_item" do
        order_item = OrderItem.create! valid_attributes
        patch order_item_url(order_item),
              params: { order_item: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the order_item" do
        order_item = OrderItem.create! valid_attributes
        patch order_item_url(order_item),
              params: { order_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested order_item" do
      order_item = OrderItem.create! valid_attributes
      expect {
        delete order_item_url(order_item), headers: valid_headers, as: :json
      }.to change(OrderItem, :count).by(-1)
    end
  end
end
